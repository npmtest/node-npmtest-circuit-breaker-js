{"/home/travis/build/npmtest/node-npmtest-circuit-breaker-js/test.js":"/* istanbul instrument in package npmtest_circuit_breaker_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-circuit-breaker-js/lib.npmtest_circuit_breaker_js.js":"/* istanbul instrument in package npmtest_circuit_breaker_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_circuit_breaker_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_circuit_breaker_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-circuit-breaker-js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-circuit-breaker-js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_circuit_breaker_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_circuit_breaker_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_circuit_breaker_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_circuit_breaker_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_circuit_breaker_js.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_circuit_breaker_js.__dirname +\n                    '/lib.npmtest_circuit_breaker_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-circuit-breaker-js/node_modules/circuit-breaker-js/circuit-breaker.js":"// CircuitBreaker\n// ==============\n//\n// Hystrix-like circuit breaker for JavaScript.\n\n(function() {\n  var CircuitBreaker = function(opts) {\n    opts = opts || {};\n\n    this.windowDuration  = opts.windowDuration  || 10000; // milliseconds\n    this.numBuckets      = opts.numBuckets      || 10;    // number\n    this.timeoutDuration = opts.timeoutDuration || 3000;  // milliseconds\n    this.errorThreshold  = opts.errorThreshold  || 50;    // percentage\n    this.volumeThreshold = opts.volumeThreshold || 5;     // number\n\n    this.onCircuitOpen   = opts.onCircuitOpen   || function() {};\n    this.onCircuitClose  = opts.onCircuitClose  || function() {};\n\n    this._buckets = [this._createBucket()];\n    this._state = CircuitBreaker.CLOSED;\n\n    this._startTicker();\n  };\n\n  CircuitBreaker.OPEN = 0;\n  CircuitBreaker.HALF_OPEN = 1;\n  CircuitBreaker.CLOSED = 2;\n\n  // Public API\n  // ----------\n\n  CircuitBreaker.prototype.run = function(command, fallback) {\n    if (this.isOpen()) {\n      this._executeFallback(fallback || function() {});\n    }\n    else {\n      this._executeCommand(command);\n    }\n  };\n\n  CircuitBreaker.prototype.forceClose = function() {\n    this._forced = this._state;\n    this._state = CircuitBreaker.CLOSED;\n  };\n\n  CircuitBreaker.prototype.forceOpen = function() {\n    this._forced = this._state;\n    this._state = CircuitBreaker.OPEN;\n  };\n\n  CircuitBreaker.prototype.unforce = function() {\n    this._state = this._forced;\n    this._forced = null;\n  };\n\n  CircuitBreaker.prototype.isOpen = function() {\n    return this._state == CircuitBreaker.OPEN;\n  };\n\n  // Private API\n  // -----------\n\n  CircuitBreaker.prototype._startTicker = function() {\n    var self = this;\n    var bucketIndex = 0;\n    var bucketDuration = this.windowDuration / this.numBuckets;\n\n    var tick = function() {\n      if (self._buckets.length > self.numBuckets) {\n        self._buckets.shift();\n      }\n\n      bucketIndex++;\n\n      if (bucketIndex > self.numBuckets) {\n        bucketIndex = 0;\n\n        if (self.isOpen()) {\n          self._state = CircuitBreaker.HALF_OPEN;\n        }\n      }\n\n      self._buckets.push(self._createBucket());\n    };\n\n    setInterval(tick, bucketDuration);\n  };\n\n  CircuitBreaker.prototype._createBucket = function() {\n    return { failures: 0, successes: 0, timeouts: 0, shortCircuits: 0 };\n  };\n\n  CircuitBreaker.prototype._lastBucket = function() {\n    return this._buckets[this._buckets.length - 1];\n  };\n\n  CircuitBreaker.prototype._executeCommand = function(command) {\n    var self = this;\n    var timeout;\n\n    var increment = function(prop) {\n      return function() {\n        if (!timeout) { return; }\n\n        var bucket = self._lastBucket();\n        bucket[prop]++;\n\n        if (self._forced == null) {\n          self._updateState();\n        }\n\n        clearTimeout(timeout);\n        timeout = null;\n      };\n    };\n\n    timeout = setTimeout(increment('timeouts'), this.timeoutDuration);\n\n    command(increment('successes'), increment('failures'));\n  };\n\n  CircuitBreaker.prototype._executeFallback = function(fallback) {\n    fallback();\n\n    var bucket = this._lastBucket();\n    bucket.shortCircuits++;\n  };\n\n  CircuitBreaker.prototype._calculateMetrics = function() {\n    var totalCount = 0, errorCount = 0, errorPercentage = 0;\n\n    for (var i = 0, l = this._buckets.length; i < l; i++) {\n      var bucket = this._buckets[i];\n      var errors = (bucket.failures + bucket.timeouts);\n\n      errorCount += errors;\n      totalCount += (errors + bucket.successes);\n    }\n\n    errorPercentage = (errorCount / (totalCount > 0 ? totalCount : 1)) * 100;\n\n    return { totalCount: totalCount, errorCount: errorCount, errorPercentage: errorPercentage };\n  };\n\n  CircuitBreaker.prototype._updateState = function() {\n    var metrics = this._calculateMetrics();\n\n    if (this._state == CircuitBreaker.HALF_OPEN) {\n      var lastCommandFailed = !this._lastBucket().successes && metrics.errorCount > 0;\n\n      if (lastCommandFailed) {\n        this._state = CircuitBreaker.OPEN;\n      }\n      else {\n        this._state = CircuitBreaker.CLOSED;\n        this.onCircuitClose(metrics);\n      }\n    }\n    else {\n      var overErrorThreshold = metrics.errorPercentage > this.errorThreshold;\n      var overVolumeThreshold = metrics.totalCount > this.volumeThreshold;\n      var overThreshold = overVolumeThreshold && overErrorThreshold;\n\n      if (overThreshold) {\n        this._state = CircuitBreaker.OPEN;\n        this.onCircuitOpen(metrics);\n      }\n    }\n  };\n\n  var assign = function(name, obj) {\n    var commonJS = typeof module != 'undefined' && module.exports;\n\n    if (commonJS) {\n      module.exports = obj;\n    }\n    else {\n      window[name] = obj;\n    }\n  };\n\n  assign('CircuitBreaker', CircuitBreaker);\n})();\n","/home/travis/build/npmtest/node-npmtest-circuit-breaker-js/node_modules/circuit-breaker-js/Gruntfile.js":"module.exports = function(grunt) {\n\n  grunt.initConfig({\n    connect: {\n      test: {\n        options: {\n          hostname: '*',\n          port:     4000\n        }\n      }\n    },\n\n    jasmine: {\n      all: {\n        src: [\n          'circuit-breaker.js'\n        ],\n        options: {\n          specs:   'spec/**/*.js'\n        }\n      }\n    },\n\n    jshint: {\n      all: ['Gruntfile.js', 'circuit-breaker.js'],\n      options: {\n        jshintrc: '.jshintrc'\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-connect');\n  grunt.loadNpmTasks('grunt-contrib-jasmine');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n\n  grunt.registerTask('lint',\n    'Lints the source',\n    ['jshint:all']);\n\n  grunt.registerTask('test',\n    'Runs the test suite in PhantomJS',\n    ['jasmine:all']);\n\n  grunt.registerTask('test:browser',\n    'Runs the test suite in a browser',\n    ['jasmine:all:build', 'connect:test:keepalive']);\n\n  grunt.registerTask('default',\n    ['lint', 'test']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-circuit-breaker-js/node_modules/circuit-breaker-js/spec/circuit_breaker_spec.js":"describe('CircuitBreaker', function() {\n\n  var breaker;\n\n  var success = function() {\n    var command = function(success) {\n      success();\n    };\n\n    breaker.run(command);\n  };\n\n  var fail = function() {\n    var command = function(success, failed) {\n      failed();\n    };\n\n    breaker.run(command);\n  };\n\n  var timeout = function() {\n    var command = function() {};\n    breaker.run(command);\n\n    jasmine.Clock.tick(1000);\n    jasmine.Clock.tick(1000);\n    jasmine.Clock.tick(1000);\n  };\n\n  beforeEach(function() {\n    jasmine.Clock.useMock();\n    breaker = new CircuitBreaker();\n  });\n\n  describe('with a working service', function() {\n\n    it('should run the command', function() {\n      var command = jasmine.createSpy();\n      breaker.run(command);\n\n      expect(command).toHaveBeenCalled();\n    });\n\n    it('should be able to notify the breaker if the command was successful', function() {\n      success();\n\n      var bucket = breaker._buckets[breaker._buckets.length - 1];\n      expect(bucket.successes).toBe(1);\n    });\n\n    it('should be able to notify the breaker if the command failed', function() {\n      fail();\n\n      var bucket = breaker._lastBucket();\n      expect(bucket.failures).toBe(1);\n    });\n\n    it('should record a timeout if not a success or failure', function() {\n      timeout();\n\n      var bucket = breaker._lastBucket();\n      expect(bucket.timeouts).toBe(1);\n    });\n\n    it('should not call timeout if there is a success', function() {\n      success();\n\n      jasmine.Clock.tick(1000);\n      jasmine.Clock.tick(1000);\n      jasmine.Clock.tick(1000);\n\n      var bucket = breaker._lastBucket();\n      expect(bucket.timeouts).toBe(0);\n    });\n\n    it('should not call timeout if there is a failure', function() {\n      fail();\n\n      jasmine.Clock.tick(1000);\n      jasmine.Clock.tick(1000);\n      jasmine.Clock.tick(1000);\n\n      var bucket = breaker._lastBucket();\n      expect(bucket.timeouts).toBe(0);\n    });\n\n    it('should not record a success when there is a timeout', function() {\n      var command = function(success) {\n        jasmine.Clock.tick(1000);\n        jasmine.Clock.tick(1000);\n        jasmine.Clock.tick(1000);\n\n        success();\n      };\n\n      breaker.run(command);\n\n      var bucket = breaker._lastBucket();\n      expect(bucket.successes).toBe(0);\n    });\n\n    it('should not record a failure when there is a timeout', function() {\n      var command = function(success, fail) {\n        jasmine.Clock.tick(1000);\n        jasmine.Clock.tick(1000);\n        jasmine.Clock.tick(1000);\n\n        fail();\n      };\n\n      breaker.run(command);\n\n      var bucket = breaker._lastBucket();\n      expect(bucket.failures).toBe(0);\n    });\n  });\n\n  describe('with a broken service', function() {\n\n    beforeEach(function() {\n      spyOn(breaker, 'isOpen').andReturn(true);\n    });\n\n    it('should not run the command', function() {\n      var command = jasmine.createSpy();\n      breaker.run(command);\n\n      expect(command).not.toHaveBeenCalled();\n    });\n\n    it('should run the fallback if one is provided', function() {\n      var command = jasmine.createSpy();\n      var fallback = jasmine.createSpy();\n\n      breaker.run(command, fallback);\n\n      expect(fallback).toHaveBeenCalled();\n    });\n\n    it('should record a short circuit', function() {\n      var command = jasmine.createSpy();\n      breaker.run(command);\n\n      expect(command).not.toHaveBeenCalled();\n\n      var bucket = breaker._lastBucket();\n      expect(bucket.shortCircuits).toBe(1);\n    });\n  });\n\n  describe('isOpen', function() {\n\n    it('should be false if errors are below the threshold', function() {\n      breaker.errorThreshold = 75;\n\n      fail();\n      fail();\n      fail();\n      success();\n\n      expect(breaker.isOpen()).toBe(false);\n    });\n\n    it('should be true if errors are above the threshold', function() {\n      breaker.errorThreshold = 75;\n\n      fail();\n      fail();\n      fail();\n      fail();\n      fail();\n      success();\n\n      expect(breaker.isOpen()).toBe(true);\n    });\n\n    it('should be true if timeouts are above the threshold', function() {\n      breaker.errorThreshold = 25;\n      breaker.volumeThreshold = 1;\n\n      timeout();\n      timeout();\n      success();\n\n      expect(breaker.isOpen()).toBe(true);\n    });\n\n    it('should maintain failed state after window has passed', function() {\n      breaker.errorThreshold = 25;\n      breaker.volumeThreshold = 1;\n\n      fail();\n      fail();\n      fail();\n      fail();\n\n      jasmine.Clock.tick(11001);\n\n      fail();\n\n      expect(breaker.isOpen()).toBe(true);\n    });\n\n    it('should retry after window has elapsed', function() {\n      fail();\n      fail();\n      fail();\n      fail();\n\n      jasmine.Clock.tick(11001);\n\n      var command = jasmine.createSpy();\n      breaker.run(command);\n\n      expect(command).toHaveBeenCalled();\n    });\n\n    it('should include errors within the current time window', function() {\n      breaker.errorThreshold = 75;\n\n      fail();\n      fail();\n      fail();\n      fail();\n      fail();\n      success();\n\n      jasmine.Clock.tick(1001);\n\n      expect(breaker.isOpen()).toBe(true);\n    });\n\n    it('should not be broken without having more than minumum number of errors', function() {\n      breaker.errorThreshold = 25;\n      breaker.volumeThreshold = 1;\n\n      fail();\n\n      expect(breaker.isOpen()).toBe(false);\n    });\n  });\n\n  describe('logging', function() {\n    var openSpy, closeSpy;\n\n    beforeEach(function() {\n      openSpy = jasmine.createSpy();\n      closeSpy = jasmine.createSpy();\n\n      breaker.volumeThreshold = 1;\n      breaker.onCircuitOpen = openSpy;\n      breaker.onCircuitClose = closeSpy;\n    });\n\n    it('should call the onCircuitOpen method when a failure is recorded', function() {\n      fail();\n      fail();\n\n      expect(openSpy).toHaveBeenCalled();\n    });\n\n    it('should call the onCircuitClosed method when the break is successfully reset', function() {\n      fail();\n      fail();\n      fail();\n      fail();\n\n      jasmine.Clock.tick(11001);\n\n      success();\n\n      expect(closeSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('forceClose', function() {\n\n    it('should bypass threshold checks', function() {\n      fail();\n      fail();\n      fail();\n      fail();\n      fail();\n      fail();\n\n      breaker.forceClose();\n\n      var command = jasmine.createSpy();\n      breaker.run(command);\n\n      expect(command).toHaveBeenCalled();\n      expect(breaker.isOpen()).toBe(false);\n    });\n\n    it('should not collect stats', function() {\n      fail();\n      fail();\n      fail();\n      fail();\n      fail();\n      fail();\n\n      breaker.forceClose();\n      success();\n      success();\n      success();\n      success();\n      success();\n\n      var command = jasmine.createSpy();\n      breaker.run(command);\n\n      expect(command).toHaveBeenCalled();\n      expect(breaker.isOpen()).toBe(false);\n    });\n  });\n\n  describe('forceOpen', function() {\n\n    it('should bypass threshold checks', function() {\n      success();\n      success();\n      success();\n      success();\n      success();\n      success();\n\n      breaker.forceOpen();\n\n      var command = jasmine.createSpy();\n      breaker.run(command);\n\n      expect(command).not.toHaveBeenCalled();\n      expect(breaker.isOpen()).toBe(true);\n    });\n\n    it('should not collect stats', function() {\n      success();\n      success();\n      success();\n      success();\n      success();\n      success();\n\n      breaker.forceOpen();\n      fail();\n      fail();\n      fail();\n      fail();\n      fail();\n\n      var command = jasmine.createSpy();\n      breaker.run(command);\n\n      expect(command).not.toHaveBeenCalled();\n      expect(breaker.isOpen()).toBe(true);\n    });\n  });\n\n  describe('unforce', function () {\n\n    it('should recover from a force-closed circuit', function() {\n      fail();\n      fail();\n      fail();\n      fail();\n      fail();\n      fail();\n\n      breaker.forceClose();\n      breaker.unforce();\n\n      var command = jasmine.createSpy();\n      breaker.run(command);\n\n      expect(command).not.toHaveBeenCalled();\n      expect(breaker.isOpen()).toBe(true);\n    });\n\n    it('should recover from a force-open circuit', function() {\n      success();\n      success();\n      success();\n      success();\n      success();\n      success();\n\n      breaker.forceOpen();\n      breaker.unforce();\n\n      var command = jasmine.createSpy();\n      breaker.run(command);\n\n      expect(command).toHaveBeenCalled();\n      expect(breaker.isOpen()).toBe(false);\n    });\n\n  });\n});\n"}